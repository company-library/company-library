generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  name                  String
  imageUrl              String?
  createdAt             DateTime              @default(now())
  lendingHistories      LendingHistory[]
  RegistrationHistories RegistrationHistory[]
  Impressions           Impression[]
  Reservations          Reservation[]

  @@map("users")
}

model Book {
  id                    Int                   @id @default(autoincrement())
  title                 String
  ISBN                  String                @unique
  imageUrl              String?
  createdAt             DateTime              @default(now())
  lendingHistories      LendingHistory[]
  RegistrationHistories RegistrationHistory[]
  Impressions           Impression[]
  Reservations          Reservation[]

  @@map("books")
}

model LendingHistory {
  id            Int            @id @default(autoincrement())
  bookId        Int
  userId        Int
  dueDate       DateTime
  lentAt        DateTime       @default(now())
  Books         Book           @relation(fields: [bookId], references: [id])
  Users         User           @relation(fields: [userId], references: [id])
  returnHistory ReturnHistory?

  @@map("lending_histories")
}

model ReturnHistory {
  lendingHistoryId Int            @unique
  returnedAt       DateTime       @default(now())
  lendingHistory   LendingHistory @relation(fields: [lendingHistoryId], references: [id])

  @@map("return_histories")
}

model RegistrationHistory {
  id        Int      @id @default(autoincrement())
  bookId    Int
  userId    Int
  Books     Book     @relation(fields: [bookId], references: [id])
  Users     User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("registration_histories")
}

model Impression {
  id         Int      @id @default(autoincrement())
  bookId     Int
  userId     Int
  impression String
  Books      Book     @relation(fields: [bookId], references: [id])
  Users      User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("impressions")
}

model Reservation {
  id              Int      @id @default(autoincrement())
  bookId          Int
  userId          Int
  reservationDate DateTime @db.Date
  Books           Book     @relation(fields: [bookId], references: [id])
  Users           User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())

  @@map("reservations")
}
