generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  name                  String
  imageUrl              String?               @map("image_url")
  createdAt             DateTime              @default(now()) @map("created_at")
  lendingHistories      LendingHistory[]
  registrationHistories RegistrationHistory[]
  impressions           Impression[]
  reservations          Reservation[]

  @@map("users")
}

model Book {
  id                    Int                   @id @default(autoincrement())
  title                 String
  isbn                  String                @unique
  imageUrl              String?               @map("image_url")
  createdAt             DateTime              @default(now()) @map("created_at")
  lendingHistories      LendingHistory[]
  registrationHistories RegistrationHistory[]
  impressions           Impression[]
  reservations          Reservation[]

  @@map("books")
}

model LendingHistory {
  id            Int            @id @default(autoincrement())
  bookId        Int            @map("book_id")
  userId        Int            @map("user_id")
  dueDate       DateTime       @map("due_date")
  lentAt        DateTime       @default(now()) @map("lent_at")
  book          Book           @relation(fields: [bookId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  returnHistory ReturnHistory?

  @@map("lending_histories")
}

model ReturnHistory {
  lendingHistoryId Int            @unique @map("lending_history_id")
  returnedAt       DateTime       @default(now()) @map("returned_at")
  lendingHistory   LendingHistory @relation(fields: [lendingHistoryId], references: [id])

  @@map("return_histories")
}

model RegistrationHistory {
  id        Int      @id @default(autoincrement())
  bookId    Int      @map("book_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("registration_histories")
}

model Impression {
  id         Int      @id @default(autoincrement())
  bookId     Int      @map("book_id")
  userId     Int      @map("user_id")
  impression String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  book       Book     @relation(fields: [bookId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("impressions")
}

model Reservation {
  id              Int      @id @default(autoincrement())
  bookId          Int      @map("book_id")
  userId          Int      @map("user_id")
  reservationDate DateTime @db.Date @map("reservation_date")
  createdAt       DateTime @default(now()) @map("created_at")
  book            Book     @relation(fields: [bookId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("reservations")
}
