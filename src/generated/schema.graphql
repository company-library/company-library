schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "books"
"""
type books {
  createdAt: timestamptz!
  id: Int!
  imageUrl: String

  """An array relationship"""
  impressions(
    """distinct select on columns"""
    distinct_on: [impressions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impressions_order_by!]

    """filter the rows returned"""
    where: impressions_bool_exp
  ): [impressions!]!

  """An aggregate relationship"""
  impressions_aggregate(
    """distinct select on columns"""
    distinct_on: [impressions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impressions_order_by!]

    """filter the rows returned"""
    where: impressions_bool_exp
  ): impressions_aggregate!
  isbn: String!

  """An array relationship"""
  lending_histories(
    """distinct select on columns"""
    distinct_on: [lendingHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lendingHistories_order_by!]

    """filter the rows returned"""
    where: lendingHistories_bool_exp
  ): [lendingHistories!]!

  """An aggregate relationship"""
  lending_histories_aggregate(
    """distinct select on columns"""
    distinct_on: [lendingHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lendingHistories_order_by!]

    """filter the rows returned"""
    where: lendingHistories_bool_exp
  ): lendingHistories_aggregate!

  """An array relationship"""
  registration_histories(
    """distinct select on columns"""
    distinct_on: [registrationHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registrationHistories_order_by!]

    """filter the rows returned"""
    where: registrationHistories_bool_exp
  ): [registrationHistories!]!

  """An aggregate relationship"""
  registration_histories_aggregate(
    """distinct select on columns"""
    distinct_on: [registrationHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registrationHistories_order_by!]

    """filter the rows returned"""
    where: registrationHistories_bool_exp
  ): registrationHistories_aggregate!

  """An array relationship"""
  reservations(
    """distinct select on columns"""
    distinct_on: [reservations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reservations_order_by!]

    """filter the rows returned"""
    where: reservations_bool_exp
  ): [reservations!]!

  """An aggregate relationship"""
  reservations_aggregate(
    """distinct select on columns"""
    distinct_on: [reservations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reservations_order_by!]

    """filter the rows returned"""
    where: reservations_bool_exp
  ): reservations_aggregate!
  title: String!
}

"""
aggregated selection of "books"
"""
type books_aggregate {
  aggregate: books_aggregate_fields
  nodes: [books!]!
}

"""
aggregate fields of "books"
"""
type books_aggregate_fields {
  avg: books_avg_fields
  count(columns: [books_select_column!], distinct: Boolean): Int!
  max: books_max_fields
  min: books_min_fields
  stddev: books_stddev_fields
  stddev_pop: books_stddev_pop_fields
  stddev_samp: books_stddev_samp_fields
  sum: books_sum_fields
  var_pop: books_var_pop_fields
  var_samp: books_var_samp_fields
  variance: books_variance_fields
}

"""aggregate avg on columns"""
type books_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "books". All fields are combined with a logical 'AND'.
"""
input books_bool_exp {
  _and: [books_bool_exp!]
  _not: books_bool_exp
  _or: [books_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  imageUrl: String_comparison_exp
  impressions: impressions_bool_exp
  isbn: String_comparison_exp
  lending_histories: lendingHistories_bool_exp
  registration_histories: registrationHistories_bool_exp
  reservations: reservations_bool_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "books"
"""
enum books_constraint {
  """unique or primary key constraint"""
  books_isbn_key

  """unique or primary key constraint"""
  books_pkey
}

"""
input type for incrementing numeric columns in table "books"
"""
input books_inc_input {
  id: Int
}

"""
input type for inserting data into table "books"
"""
input books_insert_input {
  createdAt: timestamptz
  id: Int
  imageUrl: String
  impressions: impressions_arr_rel_insert_input
  isbn: String
  lending_histories: lendingHistories_arr_rel_insert_input
  registration_histories: registrationHistories_arr_rel_insert_input
  reservations: reservations_arr_rel_insert_input
  title: String
}

"""aggregate max on columns"""
type books_max_fields {
  createdAt: timestamptz
  id: Int
  imageUrl: String
  isbn: String
  title: String
}

"""aggregate min on columns"""
type books_min_fields {
  createdAt: timestamptz
  id: Int
  imageUrl: String
  isbn: String
  title: String
}

"""
response of any mutation on the table "books"
"""
type books_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [books!]!
}

"""
input type for inserting object relation for remote table "books"
"""
input books_obj_rel_insert_input {
  data: books_insert_input!

  """upsert condition"""
  on_conflict: books_on_conflict
}

"""
on_conflict condition type for table "books"
"""
input books_on_conflict {
  constraint: books_constraint!
  update_columns: [books_update_column!]! = []
  where: books_bool_exp
}

"""Ordering options when selecting data from "books"."""
input books_order_by {
  createdAt: order_by
  id: order_by
  imageUrl: order_by
  impressions_aggregate: impressions_aggregate_order_by
  isbn: order_by
  lending_histories_aggregate: lendingHistories_aggregate_order_by
  registration_histories_aggregate: registrationHistories_aggregate_order_by
  reservations_aggregate: reservations_aggregate_order_by
  title: order_by
}

"""primary key columns input for table: books"""
input books_pk_columns_input {
  id: Int!
}

"""
select columns of table "books"
"""
enum books_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  imageUrl

  """column name"""
  isbn

  """column name"""
  title
}

"""
input type for updating data in table "books"
"""
input books_set_input {
  createdAt: timestamptz
  id: Int
  imageUrl: String
  isbn: String
  title: String
}

"""aggregate stddev on columns"""
type books_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type books_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type books_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type books_sum_fields {
  id: Int
}

"""
update columns of table "books"
"""
enum books_update_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  imageUrl

  """column name"""
  isbn

  """column name"""
  title
}

"""aggregate var_pop on columns"""
type books_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type books_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type books_variance_fields {
  id: Float
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "impressions"
"""
type impressions {
  """An object relationship"""
  book: books!
  bookId: Int!
  createdAt: timestamptz!
  id: Int!
  impression: String!
  updatedAt: timestamptz!

  """An object relationship"""
  user: users!
  userId: Int!
}

"""
aggregated selection of "impressions"
"""
type impressions_aggregate {
  aggregate: impressions_aggregate_fields
  nodes: [impressions!]!
}

"""
aggregate fields of "impressions"
"""
type impressions_aggregate_fields {
  avg: impressions_avg_fields
  count(columns: [impressions_select_column!], distinct: Boolean): Int!
  max: impressions_max_fields
  min: impressions_min_fields
  stddev: impressions_stddev_fields
  stddev_pop: impressions_stddev_pop_fields
  stddev_samp: impressions_stddev_samp_fields
  sum: impressions_sum_fields
  var_pop: impressions_var_pop_fields
  var_samp: impressions_var_samp_fields
  variance: impressions_variance_fields
}

"""
order by aggregate values of table "impressions"
"""
input impressions_aggregate_order_by {
  avg: impressions_avg_order_by
  count: order_by
  max: impressions_max_order_by
  min: impressions_min_order_by
  stddev: impressions_stddev_order_by
  stddev_pop: impressions_stddev_pop_order_by
  stddev_samp: impressions_stddev_samp_order_by
  sum: impressions_sum_order_by
  var_pop: impressions_var_pop_order_by
  var_samp: impressions_var_samp_order_by
  variance: impressions_variance_order_by
}

"""
input type for inserting array relation for remote table "impressions"
"""
input impressions_arr_rel_insert_input {
  data: [impressions_insert_input!]!

  """upsert condition"""
  on_conflict: impressions_on_conflict
}

"""aggregate avg on columns"""
type impressions_avg_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by avg() on columns of table "impressions"
"""
input impressions_avg_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "impressions". All fields are combined with a logical 'AND'.
"""
input impressions_bool_exp {
  _and: [impressions_bool_exp!]
  _not: impressions_bool_exp
  _or: [impressions_bool_exp!]
  book: books_bool_exp
  bookId: Int_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  impression: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: users_bool_exp
  userId: Int_comparison_exp
}

"""
unique or primary key constraints on table "impressions"
"""
enum impressions_constraint {
  """unique or primary key constraint"""
  impressions_pkey
}

"""
input type for incrementing numeric columns in table "impressions"
"""
input impressions_inc_input {
  bookId: Int
  id: Int
  userId: Int
}

"""
input type for inserting data into table "impressions"
"""
input impressions_insert_input {
  book: books_obj_rel_insert_input
  bookId: Int
  createdAt: timestamptz
  id: Int
  impression: String
  updatedAt: timestamptz
  user: users_obj_rel_insert_input
  userId: Int
}

"""aggregate max on columns"""
type impressions_max_fields {
  bookId: Int
  createdAt: timestamptz
  id: Int
  impression: String
  updatedAt: timestamptz
  userId: Int
}

"""
order by max() on columns of table "impressions"
"""
input impressions_max_order_by {
  bookId: order_by
  createdAt: order_by
  id: order_by
  impression: order_by
  updatedAt: order_by
  userId: order_by
}

"""aggregate min on columns"""
type impressions_min_fields {
  bookId: Int
  createdAt: timestamptz
  id: Int
  impression: String
  updatedAt: timestamptz
  userId: Int
}

"""
order by min() on columns of table "impressions"
"""
input impressions_min_order_by {
  bookId: order_by
  createdAt: order_by
  id: order_by
  impression: order_by
  updatedAt: order_by
  userId: order_by
}

"""
response of any mutation on the table "impressions"
"""
type impressions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [impressions!]!
}

"""
on_conflict condition type for table "impressions"
"""
input impressions_on_conflict {
  constraint: impressions_constraint!
  update_columns: [impressions_update_column!]! = []
  where: impressions_bool_exp
}

"""Ordering options when selecting data from "impressions"."""
input impressions_order_by {
  book: books_order_by
  bookId: order_by
  createdAt: order_by
  id: order_by
  impression: order_by
  updatedAt: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: impressions"""
input impressions_pk_columns_input {
  id: Int!
}

"""
select columns of table "impressions"
"""
enum impressions_select_column {
  """column name"""
  bookId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  impression

  """column name"""
  updatedAt

  """column name"""
  userId
}

"""
input type for updating data in table "impressions"
"""
input impressions_set_input {
  bookId: Int
  createdAt: timestamptz
  id: Int
  impression: String
  updatedAt: timestamptz
  userId: Int
}

"""aggregate stddev on columns"""
type impressions_stddev_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev() on columns of table "impressions"
"""
input impressions_stddev_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type impressions_stddev_pop_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "impressions"
"""
input impressions_stddev_pop_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type impressions_stddev_samp_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "impressions"
"""
input impressions_stddev_samp_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate sum on columns"""
type impressions_sum_fields {
  bookId: Int
  id: Int
  userId: Int
}

"""
order by sum() on columns of table "impressions"
"""
input impressions_sum_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
update columns of table "impressions"
"""
enum impressions_update_column {
  """column name"""
  bookId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  impression

  """column name"""
  updatedAt

  """column name"""
  userId
}

"""aggregate var_pop on columns"""
type impressions_var_pop_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by var_pop() on columns of table "impressions"
"""
input impressions_var_pop_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type impressions_var_samp_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by var_samp() on columns of table "impressions"
"""
input impressions_var_samp_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type impressions_variance_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by variance() on columns of table "impressions"
"""
input impressions_variance_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
columns and relationships of "lending_histories"
"""
type lendingHistories {
  """An object relationship"""
  book: books!
  bookId: Int!
  createdAt: timestamptz!
  dueDate: date!
  id: Int!

  """An array relationship"""
  return_histories(
    """distinct select on columns"""
    distinct_on: [returnHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [returnHistories_order_by!]

    """filter the rows returned"""
    where: returnHistories_bool_exp
  ): [returnHistories!]!

  """An aggregate relationship"""
  return_histories_aggregate(
    """distinct select on columns"""
    distinct_on: [returnHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [returnHistories_order_by!]

    """filter the rows returned"""
    where: returnHistories_bool_exp
  ): returnHistories_aggregate!

  """An object relationship"""
  user: users!
  userId: Int!
}

"""
aggregated selection of "lending_histories"
"""
type lendingHistories_aggregate {
  aggregate: lendingHistories_aggregate_fields
  nodes: [lendingHistories!]!
}

"""
aggregate fields of "lending_histories"
"""
type lendingHistories_aggregate_fields {
  avg: lendingHistories_avg_fields
  count(columns: [lendingHistories_select_column!], distinct: Boolean): Int!
  max: lendingHistories_max_fields
  min: lendingHistories_min_fields
  stddev: lendingHistories_stddev_fields
  stddev_pop: lendingHistories_stddev_pop_fields
  stddev_samp: lendingHistories_stddev_samp_fields
  sum: lendingHistories_sum_fields
  var_pop: lendingHistories_var_pop_fields
  var_samp: lendingHistories_var_samp_fields
  variance: lendingHistories_variance_fields
}

"""
order by aggregate values of table "lending_histories"
"""
input lendingHistories_aggregate_order_by {
  avg: lendingHistories_avg_order_by
  count: order_by
  max: lendingHistories_max_order_by
  min: lendingHistories_min_order_by
  stddev: lendingHistories_stddev_order_by
  stddev_pop: lendingHistories_stddev_pop_order_by
  stddev_samp: lendingHistories_stddev_samp_order_by
  sum: lendingHistories_sum_order_by
  var_pop: lendingHistories_var_pop_order_by
  var_samp: lendingHistories_var_samp_order_by
  variance: lendingHistories_variance_order_by
}

"""
input type for inserting array relation for remote table "lending_histories"
"""
input lendingHistories_arr_rel_insert_input {
  data: [lendingHistories_insert_input!]!

  """upsert condition"""
  on_conflict: lendingHistories_on_conflict
}

"""aggregate avg on columns"""
type lendingHistories_avg_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by avg() on columns of table "lending_histories"
"""
input lendingHistories_avg_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "lending_histories". All fields are combined with a logical 'AND'.
"""
input lendingHistories_bool_exp {
  _and: [lendingHistories_bool_exp!]
  _not: lendingHistories_bool_exp
  _or: [lendingHistories_bool_exp!]
  book: books_bool_exp
  bookId: Int_comparison_exp
  createdAt: timestamptz_comparison_exp
  dueDate: date_comparison_exp
  id: Int_comparison_exp
  return_histories: returnHistories_bool_exp
  user: users_bool_exp
  userId: Int_comparison_exp
}

"""
unique or primary key constraints on table "lending_histories"
"""
enum lendingHistories_constraint {
  """unique or primary key constraint"""
  lending_histories_pkey
}

"""
input type for incrementing numeric columns in table "lending_histories"
"""
input lendingHistories_inc_input {
  bookId: Int
  id: Int
  userId: Int
}

"""
input type for inserting data into table "lending_histories"
"""
input lendingHistories_insert_input {
  book: books_obj_rel_insert_input
  bookId: Int
  createdAt: timestamptz
  dueDate: date
  id: Int
  return_histories: returnHistories_arr_rel_insert_input
  user: users_obj_rel_insert_input
  userId: Int
}

"""aggregate max on columns"""
type lendingHistories_max_fields {
  bookId: Int
  createdAt: timestamptz
  dueDate: date
  id: Int
  userId: Int
}

"""
order by max() on columns of table "lending_histories"
"""
input lendingHistories_max_order_by {
  bookId: order_by
  createdAt: order_by
  dueDate: order_by
  id: order_by
  userId: order_by
}

"""aggregate min on columns"""
type lendingHistories_min_fields {
  bookId: Int
  createdAt: timestamptz
  dueDate: date
  id: Int
  userId: Int
}

"""
order by min() on columns of table "lending_histories"
"""
input lendingHistories_min_order_by {
  bookId: order_by
  createdAt: order_by
  dueDate: order_by
  id: order_by
  userId: order_by
}

"""
response of any mutation on the table "lending_histories"
"""
type lendingHistories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lendingHistories!]!
}

"""
input type for inserting object relation for remote table "lending_histories"
"""
input lendingHistories_obj_rel_insert_input {
  data: lendingHistories_insert_input!

  """upsert condition"""
  on_conflict: lendingHistories_on_conflict
}

"""
on_conflict condition type for table "lending_histories"
"""
input lendingHistories_on_conflict {
  constraint: lendingHistories_constraint!
  update_columns: [lendingHistories_update_column!]! = []
  where: lendingHistories_bool_exp
}

"""Ordering options when selecting data from "lending_histories"."""
input lendingHistories_order_by {
  book: books_order_by
  bookId: order_by
  createdAt: order_by
  dueDate: order_by
  id: order_by
  return_histories_aggregate: returnHistories_aggregate_order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: lendingHistories"""
input lendingHistories_pk_columns_input {
  id: Int!
}

"""
select columns of table "lending_histories"
"""
enum lendingHistories_select_column {
  """column name"""
  bookId

  """column name"""
  createdAt

  """column name"""
  dueDate

  """column name"""
  id

  """column name"""
  userId
}

"""
input type for updating data in table "lending_histories"
"""
input lendingHistories_set_input {
  bookId: Int
  createdAt: timestamptz
  dueDate: date
  id: Int
  userId: Int
}

"""aggregate stddev on columns"""
type lendingHistories_stddev_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev() on columns of table "lending_histories"
"""
input lendingHistories_stddev_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type lendingHistories_stddev_pop_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "lending_histories"
"""
input lendingHistories_stddev_pop_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type lendingHistories_stddev_samp_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "lending_histories"
"""
input lendingHistories_stddev_samp_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate sum on columns"""
type lendingHistories_sum_fields {
  bookId: Int
  id: Int
  userId: Int
}

"""
order by sum() on columns of table "lending_histories"
"""
input lendingHistories_sum_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
update columns of table "lending_histories"
"""
enum lendingHistories_update_column {
  """column name"""
  bookId

  """column name"""
  createdAt

  """column name"""
  dueDate

  """column name"""
  id

  """column name"""
  userId
}

"""aggregate var_pop on columns"""
type lendingHistories_var_pop_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by var_pop() on columns of table "lending_histories"
"""
input lendingHistories_var_pop_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type lendingHistories_var_samp_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by var_samp() on columns of table "lending_histories"
"""
input lendingHistories_var_samp_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type lendingHistories_variance_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by variance() on columns of table "lending_histories"
"""
input lendingHistories_variance_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "books"
  """
  delete_books(
    """filter the rows which have to be deleted"""
    where: books_bool_exp!
  ): books_mutation_response

  """
  delete single row from the table: "books"
  """
  delete_books_by_pk(id: Int!): books

  """
  delete data from the table: "impressions"
  """
  delete_impressions(
    """filter the rows which have to be deleted"""
    where: impressions_bool_exp!
  ): impressions_mutation_response

  """
  delete single row from the table: "impressions"
  """
  delete_impressions_by_pk(id: Int!): impressions

  """
  delete data from the table: "lending_histories"
  """
  delete_lendingHistories(
    """filter the rows which have to be deleted"""
    where: lendingHistories_bool_exp!
  ): lendingHistories_mutation_response

  """
  delete single row from the table: "lending_histories"
  """
  delete_lendingHistories_by_pk(id: Int!): lendingHistories

  """
  delete data from the table: "registration_histories"
  """
  delete_registrationHistories(
    """filter the rows which have to be deleted"""
    where: registrationHistories_bool_exp!
  ): registrationHistories_mutation_response

  """
  delete single row from the table: "registration_histories"
  """
  delete_registrationHistories_by_pk(id: Int!): registrationHistories

  """
  delete data from the table: "reservations"
  """
  delete_reservations(
    """filter the rows which have to be deleted"""
    where: reservations_bool_exp!
  ): reservations_mutation_response

  """
  delete single row from the table: "reservations"
  """
  delete_reservations_by_pk(id: Int!): reservations

  """
  delete data from the table: "return_histories"
  """
  delete_returnHistories(
    """filter the rows which have to be deleted"""
    where: returnHistories_bool_exp!
  ): returnHistories_mutation_response

  """
  delete single row from the table: "return_histories"
  """
  delete_returnHistories_by_pk(id: Int!): returnHistories

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "books"
  """
  insert_books(
    """the rows to be inserted"""
    objects: [books_insert_input!]!

    """upsert condition"""
    on_conflict: books_on_conflict
  ): books_mutation_response

  """
  insert a single row into the table: "books"
  """
  insert_books_one(
    """the row to be inserted"""
    object: books_insert_input!

    """upsert condition"""
    on_conflict: books_on_conflict
  ): books

  """
  insert data into the table: "impressions"
  """
  insert_impressions(
    """the rows to be inserted"""
    objects: [impressions_insert_input!]!

    """upsert condition"""
    on_conflict: impressions_on_conflict
  ): impressions_mutation_response

  """
  insert a single row into the table: "impressions"
  """
  insert_impressions_one(
    """the row to be inserted"""
    object: impressions_insert_input!

    """upsert condition"""
    on_conflict: impressions_on_conflict
  ): impressions

  """
  insert data into the table: "lending_histories"
  """
  insert_lendingHistories(
    """the rows to be inserted"""
    objects: [lendingHistories_insert_input!]!

    """upsert condition"""
    on_conflict: lendingHistories_on_conflict
  ): lendingHistories_mutation_response

  """
  insert a single row into the table: "lending_histories"
  """
  insert_lendingHistories_one(
    """the row to be inserted"""
    object: lendingHistories_insert_input!

    """upsert condition"""
    on_conflict: lendingHistories_on_conflict
  ): lendingHistories

  """
  insert data into the table: "registration_histories"
  """
  insert_registrationHistories(
    """the rows to be inserted"""
    objects: [registrationHistories_insert_input!]!

    """upsert condition"""
    on_conflict: registrationHistories_on_conflict
  ): registrationHistories_mutation_response

  """
  insert a single row into the table: "registration_histories"
  """
  insert_registrationHistories_one(
    """the row to be inserted"""
    object: registrationHistories_insert_input!

    """upsert condition"""
    on_conflict: registrationHistories_on_conflict
  ): registrationHistories

  """
  insert data into the table: "reservations"
  """
  insert_reservations(
    """the rows to be inserted"""
    objects: [reservations_insert_input!]!

    """upsert condition"""
    on_conflict: reservations_on_conflict
  ): reservations_mutation_response

  """
  insert a single row into the table: "reservations"
  """
  insert_reservations_one(
    """the row to be inserted"""
    object: reservations_insert_input!

    """upsert condition"""
    on_conflict: reservations_on_conflict
  ): reservations

  """
  insert data into the table: "return_histories"
  """
  insert_returnHistories(
    """the rows to be inserted"""
    objects: [returnHistories_insert_input!]!

    """upsert condition"""
    on_conflict: returnHistories_on_conflict
  ): returnHistories_mutation_response

  """
  insert a single row into the table: "return_histories"
  """
  insert_returnHistories_one(
    """the row to be inserted"""
    object: returnHistories_insert_input!

    """upsert condition"""
    on_conflict: returnHistories_on_conflict
  ): returnHistories

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "books"
  """
  update_books(
    """increments the numeric columns with given value of the filtered values"""
    _inc: books_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: books_set_input

    """filter the rows which have to be updated"""
    where: books_bool_exp!
  ): books_mutation_response

  """
  update single row of the table: "books"
  """
  update_books_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: books_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: books_set_input
    pk_columns: books_pk_columns_input!
  ): books

  """
  update data of the table: "impressions"
  """
  update_impressions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: impressions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: impressions_set_input

    """filter the rows which have to be updated"""
    where: impressions_bool_exp!
  ): impressions_mutation_response

  """
  update single row of the table: "impressions"
  """
  update_impressions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: impressions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: impressions_set_input
    pk_columns: impressions_pk_columns_input!
  ): impressions

  """
  update data of the table: "lending_histories"
  """
  update_lendingHistories(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lendingHistories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lendingHistories_set_input

    """filter the rows which have to be updated"""
    where: lendingHistories_bool_exp!
  ): lendingHistories_mutation_response

  """
  update single row of the table: "lending_histories"
  """
  update_lendingHistories_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lendingHistories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lendingHistories_set_input
    pk_columns: lendingHistories_pk_columns_input!
  ): lendingHistories

  """
  update data of the table: "registration_histories"
  """
  update_registrationHistories(
    """increments the numeric columns with given value of the filtered values"""
    _inc: registrationHistories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: registrationHistories_set_input

    """filter the rows which have to be updated"""
    where: registrationHistories_bool_exp!
  ): registrationHistories_mutation_response

  """
  update single row of the table: "registration_histories"
  """
  update_registrationHistories_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: registrationHistories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: registrationHistories_set_input
    pk_columns: registrationHistories_pk_columns_input!
  ): registrationHistories

  """
  update data of the table: "reservations"
  """
  update_reservations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: reservations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reservations_set_input

    """filter the rows which have to be updated"""
    where: reservations_bool_exp!
  ): reservations_mutation_response

  """
  update single row of the table: "reservations"
  """
  update_reservations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: reservations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reservations_set_input
    pk_columns: reservations_pk_columns_input!
  ): reservations

  """
  update data of the table: "return_histories"
  """
  update_returnHistories(
    """increments the numeric columns with given value of the filtered values"""
    _inc: returnHistories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: returnHistories_set_input

    """filter the rows which have to be updated"""
    where: returnHistories_bool_exp!
  ): returnHistories_mutation_response

  """
  update single row of the table: "return_histories"
  """
  update_returnHistories_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: returnHistories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: returnHistories_set_input
    pk_columns: returnHistories_pk_columns_input!
  ): returnHistories

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): [books!]!

  """
  fetch aggregated fields from the table: "books"
  """
  books_aggregate(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): books_aggregate!

  """fetch data from the table: "books" using primary key columns"""
  books_by_pk(id: Int!): books

  """An array relationship"""
  impressions(
    """distinct select on columns"""
    distinct_on: [impressions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impressions_order_by!]

    """filter the rows returned"""
    where: impressions_bool_exp
  ): [impressions!]!

  """An aggregate relationship"""
  impressions_aggregate(
    """distinct select on columns"""
    distinct_on: [impressions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impressions_order_by!]

    """filter the rows returned"""
    where: impressions_bool_exp
  ): impressions_aggregate!

  """fetch data from the table: "impressions" using primary key columns"""
  impressions_by_pk(id: Int!): impressions

  """
  fetch data from the table: "lending_histories"
  """
  lendingHistories(
    """distinct select on columns"""
    distinct_on: [lendingHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lendingHistories_order_by!]

    """filter the rows returned"""
    where: lendingHistories_bool_exp
  ): [lendingHistories!]!

  """
  fetch aggregated fields from the table: "lending_histories"
  """
  lendingHistories_aggregate(
    """distinct select on columns"""
    distinct_on: [lendingHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lendingHistories_order_by!]

    """filter the rows returned"""
    where: lendingHistories_bool_exp
  ): lendingHistories_aggregate!

  """
  fetch data from the table: "lending_histories" using primary key columns
  """
  lendingHistories_by_pk(id: Int!): lendingHistories

  """
  fetch data from the table: "registration_histories"
  """
  registrationHistories(
    """distinct select on columns"""
    distinct_on: [registrationHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registrationHistories_order_by!]

    """filter the rows returned"""
    where: registrationHistories_bool_exp
  ): [registrationHistories!]!

  """
  fetch aggregated fields from the table: "registration_histories"
  """
  registrationHistories_aggregate(
    """distinct select on columns"""
    distinct_on: [registrationHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registrationHistories_order_by!]

    """filter the rows returned"""
    where: registrationHistories_bool_exp
  ): registrationHistories_aggregate!

  """
  fetch data from the table: "registration_histories" using primary key columns
  """
  registrationHistories_by_pk(id: Int!): registrationHistories

  """An array relationship"""
  reservations(
    """distinct select on columns"""
    distinct_on: [reservations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reservations_order_by!]

    """filter the rows returned"""
    where: reservations_bool_exp
  ): [reservations!]!

  """An aggregate relationship"""
  reservations_aggregate(
    """distinct select on columns"""
    distinct_on: [reservations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reservations_order_by!]

    """filter the rows returned"""
    where: reservations_bool_exp
  ): reservations_aggregate!

  """fetch data from the table: "reservations" using primary key columns"""
  reservations_by_pk(id: Int!): reservations

  """
  fetch data from the table: "return_histories"
  """
  returnHistories(
    """distinct select on columns"""
    distinct_on: [returnHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [returnHistories_order_by!]

    """filter the rows returned"""
    where: returnHistories_bool_exp
  ): [returnHistories!]!

  """
  fetch aggregated fields from the table: "return_histories"
  """
  returnHistories_aggregate(
    """distinct select on columns"""
    distinct_on: [returnHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [returnHistories_order_by!]

    """filter the rows returned"""
    where: returnHistories_bool_exp
  ): returnHistories_aggregate!

  """
  fetch data from the table: "return_histories" using primary key columns
  """
  returnHistories_by_pk(id: Int!): returnHistories

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

"""
columns and relationships of "registration_histories"
"""
type registrationHistories {
  """An object relationship"""
  book: books!
  bookId: Int!
  createdAt: timestamptz!
  id: Int!

  """An object relationship"""
  user: users!
  userId: Int!
}

"""
aggregated selection of "registration_histories"
"""
type registrationHistories_aggregate {
  aggregate: registrationHistories_aggregate_fields
  nodes: [registrationHistories!]!
}

"""
aggregate fields of "registration_histories"
"""
type registrationHistories_aggregate_fields {
  avg: registrationHistories_avg_fields
  count(columns: [registrationHistories_select_column!], distinct: Boolean): Int!
  max: registrationHistories_max_fields
  min: registrationHistories_min_fields
  stddev: registrationHistories_stddev_fields
  stddev_pop: registrationHistories_stddev_pop_fields
  stddev_samp: registrationHistories_stddev_samp_fields
  sum: registrationHistories_sum_fields
  var_pop: registrationHistories_var_pop_fields
  var_samp: registrationHistories_var_samp_fields
  variance: registrationHistories_variance_fields
}

"""
order by aggregate values of table "registration_histories"
"""
input registrationHistories_aggregate_order_by {
  avg: registrationHistories_avg_order_by
  count: order_by
  max: registrationHistories_max_order_by
  min: registrationHistories_min_order_by
  stddev: registrationHistories_stddev_order_by
  stddev_pop: registrationHistories_stddev_pop_order_by
  stddev_samp: registrationHistories_stddev_samp_order_by
  sum: registrationHistories_sum_order_by
  var_pop: registrationHistories_var_pop_order_by
  var_samp: registrationHistories_var_samp_order_by
  variance: registrationHistories_variance_order_by
}

"""
input type for inserting array relation for remote table "registration_histories"
"""
input registrationHistories_arr_rel_insert_input {
  data: [registrationHistories_insert_input!]!

  """upsert condition"""
  on_conflict: registrationHistories_on_conflict
}

"""aggregate avg on columns"""
type registrationHistories_avg_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by avg() on columns of table "registration_histories"
"""
input registrationHistories_avg_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "registration_histories". All fields are combined with a logical 'AND'.
"""
input registrationHistories_bool_exp {
  _and: [registrationHistories_bool_exp!]
  _not: registrationHistories_bool_exp
  _or: [registrationHistories_bool_exp!]
  book: books_bool_exp
  bookId: Int_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  user: users_bool_exp
  userId: Int_comparison_exp
}

"""
unique or primary key constraints on table "registration_histories"
"""
enum registrationHistories_constraint {
  """unique or primary key constraint"""
  registration_histories_pkey
}

"""
input type for incrementing numeric columns in table "registration_histories"
"""
input registrationHistories_inc_input {
  bookId: Int
  id: Int
  userId: Int
}

"""
input type for inserting data into table "registration_histories"
"""
input registrationHistories_insert_input {
  book: books_obj_rel_insert_input
  bookId: Int
  createdAt: timestamptz
  id: Int
  user: users_obj_rel_insert_input
  userId: Int
}

"""aggregate max on columns"""
type registrationHistories_max_fields {
  bookId: Int
  createdAt: timestamptz
  id: Int
  userId: Int
}

"""
order by max() on columns of table "registration_histories"
"""
input registrationHistories_max_order_by {
  bookId: order_by
  createdAt: order_by
  id: order_by
  userId: order_by
}

"""aggregate min on columns"""
type registrationHistories_min_fields {
  bookId: Int
  createdAt: timestamptz
  id: Int
  userId: Int
}

"""
order by min() on columns of table "registration_histories"
"""
input registrationHistories_min_order_by {
  bookId: order_by
  createdAt: order_by
  id: order_by
  userId: order_by
}

"""
response of any mutation on the table "registration_histories"
"""
type registrationHistories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [registrationHistories!]!
}

"""
on_conflict condition type for table "registration_histories"
"""
input registrationHistories_on_conflict {
  constraint: registrationHistories_constraint!
  update_columns: [registrationHistories_update_column!]! = []
  where: registrationHistories_bool_exp
}

"""Ordering options when selecting data from "registration_histories"."""
input registrationHistories_order_by {
  book: books_order_by
  bookId: order_by
  createdAt: order_by
  id: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: registrationHistories"""
input registrationHistories_pk_columns_input {
  id: Int!
}

"""
select columns of table "registration_histories"
"""
enum registrationHistories_select_column {
  """column name"""
  bookId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  userId
}

"""
input type for updating data in table "registration_histories"
"""
input registrationHistories_set_input {
  bookId: Int
  createdAt: timestamptz
  id: Int
  userId: Int
}

"""aggregate stddev on columns"""
type registrationHistories_stddev_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev() on columns of table "registration_histories"
"""
input registrationHistories_stddev_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type registrationHistories_stddev_pop_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "registration_histories"
"""
input registrationHistories_stddev_pop_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type registrationHistories_stddev_samp_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "registration_histories"
"""
input registrationHistories_stddev_samp_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate sum on columns"""
type registrationHistories_sum_fields {
  bookId: Int
  id: Int
  userId: Int
}

"""
order by sum() on columns of table "registration_histories"
"""
input registrationHistories_sum_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
update columns of table "registration_histories"
"""
enum registrationHistories_update_column {
  """column name"""
  bookId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  userId
}

"""aggregate var_pop on columns"""
type registrationHistories_var_pop_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by var_pop() on columns of table "registration_histories"
"""
input registrationHistories_var_pop_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type registrationHistories_var_samp_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by var_samp() on columns of table "registration_histories"
"""
input registrationHistories_var_samp_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type registrationHistories_variance_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by variance() on columns of table "registration_histories"
"""
input registrationHistories_variance_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
columns and relationships of "reservations"
"""
type reservations {
  """An object relationship"""
  book: books!
  bookId: Int!
  createdAt: timestamptz!
  id: Int!
  reservationDate: date!

  """An object relationship"""
  user: users!
  userId: Int!
}

"""
aggregated selection of "reservations"
"""
type reservations_aggregate {
  aggregate: reservations_aggregate_fields
  nodes: [reservations!]!
}

"""
aggregate fields of "reservations"
"""
type reservations_aggregate_fields {
  avg: reservations_avg_fields
  count(columns: [reservations_select_column!], distinct: Boolean): Int!
  max: reservations_max_fields
  min: reservations_min_fields
  stddev: reservations_stddev_fields
  stddev_pop: reservations_stddev_pop_fields
  stddev_samp: reservations_stddev_samp_fields
  sum: reservations_sum_fields
  var_pop: reservations_var_pop_fields
  var_samp: reservations_var_samp_fields
  variance: reservations_variance_fields
}

"""
order by aggregate values of table "reservations"
"""
input reservations_aggregate_order_by {
  avg: reservations_avg_order_by
  count: order_by
  max: reservations_max_order_by
  min: reservations_min_order_by
  stddev: reservations_stddev_order_by
  stddev_pop: reservations_stddev_pop_order_by
  stddev_samp: reservations_stddev_samp_order_by
  sum: reservations_sum_order_by
  var_pop: reservations_var_pop_order_by
  var_samp: reservations_var_samp_order_by
  variance: reservations_variance_order_by
}

"""
input type for inserting array relation for remote table "reservations"
"""
input reservations_arr_rel_insert_input {
  data: [reservations_insert_input!]!

  """upsert condition"""
  on_conflict: reservations_on_conflict
}

"""aggregate avg on columns"""
type reservations_avg_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by avg() on columns of table "reservations"
"""
input reservations_avg_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "reservations". All fields are combined with a logical 'AND'.
"""
input reservations_bool_exp {
  _and: [reservations_bool_exp!]
  _not: reservations_bool_exp
  _or: [reservations_bool_exp!]
  book: books_bool_exp
  bookId: Int_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  reservationDate: date_comparison_exp
  user: users_bool_exp
  userId: Int_comparison_exp
}

"""
unique or primary key constraints on table "reservations"
"""
enum reservations_constraint {
  """unique or primary key constraint"""
  reservations_pkey
}

"""
input type for incrementing numeric columns in table "reservations"
"""
input reservations_inc_input {
  bookId: Int
  id: Int
  userId: Int
}

"""
input type for inserting data into table "reservations"
"""
input reservations_insert_input {
  book: books_obj_rel_insert_input
  bookId: Int
  createdAt: timestamptz
  id: Int
  reservationDate: date
  user: users_obj_rel_insert_input
  userId: Int
}

"""aggregate max on columns"""
type reservations_max_fields {
  bookId: Int
  createdAt: timestamptz
  id: Int
  reservationDate: date
  userId: Int
}

"""
order by max() on columns of table "reservations"
"""
input reservations_max_order_by {
  bookId: order_by
  createdAt: order_by
  id: order_by
  reservationDate: order_by
  userId: order_by
}

"""aggregate min on columns"""
type reservations_min_fields {
  bookId: Int
  createdAt: timestamptz
  id: Int
  reservationDate: date
  userId: Int
}

"""
order by min() on columns of table "reservations"
"""
input reservations_min_order_by {
  bookId: order_by
  createdAt: order_by
  id: order_by
  reservationDate: order_by
  userId: order_by
}

"""
response of any mutation on the table "reservations"
"""
type reservations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [reservations!]!
}

"""
on_conflict condition type for table "reservations"
"""
input reservations_on_conflict {
  constraint: reservations_constraint!
  update_columns: [reservations_update_column!]! = []
  where: reservations_bool_exp
}

"""Ordering options when selecting data from "reservations"."""
input reservations_order_by {
  book: books_order_by
  bookId: order_by
  createdAt: order_by
  id: order_by
  reservationDate: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: reservations"""
input reservations_pk_columns_input {
  id: Int!
}

"""
select columns of table "reservations"
"""
enum reservations_select_column {
  """column name"""
  bookId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  reservationDate

  """column name"""
  userId
}

"""
input type for updating data in table "reservations"
"""
input reservations_set_input {
  bookId: Int
  createdAt: timestamptz
  id: Int
  reservationDate: date
  userId: Int
}

"""aggregate stddev on columns"""
type reservations_stddev_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev() on columns of table "reservations"
"""
input reservations_stddev_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type reservations_stddev_pop_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "reservations"
"""
input reservations_stddev_pop_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type reservations_stddev_samp_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "reservations"
"""
input reservations_stddev_samp_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate sum on columns"""
type reservations_sum_fields {
  bookId: Int
  id: Int
  userId: Int
}

"""
order by sum() on columns of table "reservations"
"""
input reservations_sum_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
update columns of table "reservations"
"""
enum reservations_update_column {
  """column name"""
  bookId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  reservationDate

  """column name"""
  userId
}

"""aggregate var_pop on columns"""
type reservations_var_pop_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by var_pop() on columns of table "reservations"
"""
input reservations_var_pop_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type reservations_var_samp_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by var_samp() on columns of table "reservations"
"""
input reservations_var_samp_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type reservations_variance_fields {
  bookId: Float
  id: Float
  userId: Float
}

"""
order by variance() on columns of table "reservations"
"""
input reservations_variance_order_by {
  bookId: order_by
  id: order_by
  userId: order_by
}

"""
columns and relationships of "return_histories"
"""
type returnHistories {
  createdAt: timestamptz!
  id: Int!
  lendingHistoryId: Int!

  """An object relationship"""
  lending_history: lendingHistories!
}

"""
aggregated selection of "return_histories"
"""
type returnHistories_aggregate {
  aggregate: returnHistories_aggregate_fields
  nodes: [returnHistories!]!
}

"""
aggregate fields of "return_histories"
"""
type returnHistories_aggregate_fields {
  avg: returnHistories_avg_fields
  count(columns: [returnHistories_select_column!], distinct: Boolean): Int!
  max: returnHistories_max_fields
  min: returnHistories_min_fields
  stddev: returnHistories_stddev_fields
  stddev_pop: returnHistories_stddev_pop_fields
  stddev_samp: returnHistories_stddev_samp_fields
  sum: returnHistories_sum_fields
  var_pop: returnHistories_var_pop_fields
  var_samp: returnHistories_var_samp_fields
  variance: returnHistories_variance_fields
}

"""
order by aggregate values of table "return_histories"
"""
input returnHistories_aggregate_order_by {
  avg: returnHistories_avg_order_by
  count: order_by
  max: returnHistories_max_order_by
  min: returnHistories_min_order_by
  stddev: returnHistories_stddev_order_by
  stddev_pop: returnHistories_stddev_pop_order_by
  stddev_samp: returnHistories_stddev_samp_order_by
  sum: returnHistories_sum_order_by
  var_pop: returnHistories_var_pop_order_by
  var_samp: returnHistories_var_samp_order_by
  variance: returnHistories_variance_order_by
}

"""
input type for inserting array relation for remote table "return_histories"
"""
input returnHistories_arr_rel_insert_input {
  data: [returnHistories_insert_input!]!

  """upsert condition"""
  on_conflict: returnHistories_on_conflict
}

"""aggregate avg on columns"""
type returnHistories_avg_fields {
  id: Float
  lendingHistoryId: Float
}

"""
order by avg() on columns of table "return_histories"
"""
input returnHistories_avg_order_by {
  id: order_by
  lendingHistoryId: order_by
}

"""
Boolean expression to filter rows from the table "return_histories". All fields are combined with a logical 'AND'.
"""
input returnHistories_bool_exp {
  _and: [returnHistories_bool_exp!]
  _not: returnHistories_bool_exp
  _or: [returnHistories_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  lendingHistoryId: Int_comparison_exp
  lending_history: lendingHistories_bool_exp
}

"""
unique or primary key constraints on table "return_histories"
"""
enum returnHistories_constraint {
  """unique or primary key constraint"""
  return_histories_pkey
}

"""
input type for incrementing numeric columns in table "return_histories"
"""
input returnHistories_inc_input {
  id: Int
  lendingHistoryId: Int
}

"""
input type for inserting data into table "return_histories"
"""
input returnHistories_insert_input {
  createdAt: timestamptz
  id: Int
  lendingHistoryId: Int
  lending_history: lendingHistories_obj_rel_insert_input
}

"""aggregate max on columns"""
type returnHistories_max_fields {
  createdAt: timestamptz
  id: Int
  lendingHistoryId: Int
}

"""
order by max() on columns of table "return_histories"
"""
input returnHistories_max_order_by {
  createdAt: order_by
  id: order_by
  lendingHistoryId: order_by
}

"""aggregate min on columns"""
type returnHistories_min_fields {
  createdAt: timestamptz
  id: Int
  lendingHistoryId: Int
}

"""
order by min() on columns of table "return_histories"
"""
input returnHistories_min_order_by {
  createdAt: order_by
  id: order_by
  lendingHistoryId: order_by
}

"""
response of any mutation on the table "return_histories"
"""
type returnHistories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [returnHistories!]!
}

"""
on_conflict condition type for table "return_histories"
"""
input returnHistories_on_conflict {
  constraint: returnHistories_constraint!
  update_columns: [returnHistories_update_column!]! = []
  where: returnHistories_bool_exp
}

"""Ordering options when selecting data from "return_histories"."""
input returnHistories_order_by {
  createdAt: order_by
  id: order_by
  lendingHistoryId: order_by
  lending_history: lendingHistories_order_by
}

"""primary key columns input for table: returnHistories"""
input returnHistories_pk_columns_input {
  id: Int!
}

"""
select columns of table "return_histories"
"""
enum returnHistories_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  lendingHistoryId
}

"""
input type for updating data in table "return_histories"
"""
input returnHistories_set_input {
  createdAt: timestamptz
  id: Int
  lendingHistoryId: Int
}

"""aggregate stddev on columns"""
type returnHistories_stddev_fields {
  id: Float
  lendingHistoryId: Float
}

"""
order by stddev() on columns of table "return_histories"
"""
input returnHistories_stddev_order_by {
  id: order_by
  lendingHistoryId: order_by
}

"""aggregate stddev_pop on columns"""
type returnHistories_stddev_pop_fields {
  id: Float
  lendingHistoryId: Float
}

"""
order by stddev_pop() on columns of table "return_histories"
"""
input returnHistories_stddev_pop_order_by {
  id: order_by
  lendingHistoryId: order_by
}

"""aggregate stddev_samp on columns"""
type returnHistories_stddev_samp_fields {
  id: Float
  lendingHistoryId: Float
}

"""
order by stddev_samp() on columns of table "return_histories"
"""
input returnHistories_stddev_samp_order_by {
  id: order_by
  lendingHistoryId: order_by
}

"""aggregate sum on columns"""
type returnHistories_sum_fields {
  id: Int
  lendingHistoryId: Int
}

"""
order by sum() on columns of table "return_histories"
"""
input returnHistories_sum_order_by {
  id: order_by
  lendingHistoryId: order_by
}

"""
update columns of table "return_histories"
"""
enum returnHistories_update_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  lendingHistoryId
}

"""aggregate var_pop on columns"""
type returnHistories_var_pop_fields {
  id: Float
  lendingHistoryId: Float
}

"""
order by var_pop() on columns of table "return_histories"
"""
input returnHistories_var_pop_order_by {
  id: order_by
  lendingHistoryId: order_by
}

"""aggregate var_samp on columns"""
type returnHistories_var_samp_fields {
  id: Float
  lendingHistoryId: Float
}

"""
order by var_samp() on columns of table "return_histories"
"""
input returnHistories_var_samp_order_by {
  id: order_by
  lendingHistoryId: order_by
}

"""aggregate variance on columns"""
type returnHistories_variance_fields {
  id: Float
  lendingHistoryId: Float
}

"""
order by variance() on columns of table "return_histories"
"""
input returnHistories_variance_order_by {
  id: order_by
  lendingHistoryId: order_by
}

type subscription_root {
  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): [books!]!

  """
  fetch aggregated fields from the table: "books"
  """
  books_aggregate(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): books_aggregate!

  """fetch data from the table: "books" using primary key columns"""
  books_by_pk(id: Int!): books

  """An array relationship"""
  impressions(
    """distinct select on columns"""
    distinct_on: [impressions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impressions_order_by!]

    """filter the rows returned"""
    where: impressions_bool_exp
  ): [impressions!]!

  """An aggregate relationship"""
  impressions_aggregate(
    """distinct select on columns"""
    distinct_on: [impressions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impressions_order_by!]

    """filter the rows returned"""
    where: impressions_bool_exp
  ): impressions_aggregate!

  """fetch data from the table: "impressions" using primary key columns"""
  impressions_by_pk(id: Int!): impressions

  """
  fetch data from the table: "lending_histories"
  """
  lendingHistories(
    """distinct select on columns"""
    distinct_on: [lendingHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lendingHistories_order_by!]

    """filter the rows returned"""
    where: lendingHistories_bool_exp
  ): [lendingHistories!]!

  """
  fetch aggregated fields from the table: "lending_histories"
  """
  lendingHistories_aggregate(
    """distinct select on columns"""
    distinct_on: [lendingHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lendingHistories_order_by!]

    """filter the rows returned"""
    where: lendingHistories_bool_exp
  ): lendingHistories_aggregate!

  """
  fetch data from the table: "lending_histories" using primary key columns
  """
  lendingHistories_by_pk(id: Int!): lendingHistories

  """
  fetch data from the table: "registration_histories"
  """
  registrationHistories(
    """distinct select on columns"""
    distinct_on: [registrationHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registrationHistories_order_by!]

    """filter the rows returned"""
    where: registrationHistories_bool_exp
  ): [registrationHistories!]!

  """
  fetch aggregated fields from the table: "registration_histories"
  """
  registrationHistories_aggregate(
    """distinct select on columns"""
    distinct_on: [registrationHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registrationHistories_order_by!]

    """filter the rows returned"""
    where: registrationHistories_bool_exp
  ): registrationHistories_aggregate!

  """
  fetch data from the table: "registration_histories" using primary key columns
  """
  registrationHistories_by_pk(id: Int!): registrationHistories

  """An array relationship"""
  reservations(
    """distinct select on columns"""
    distinct_on: [reservations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reservations_order_by!]

    """filter the rows returned"""
    where: reservations_bool_exp
  ): [reservations!]!

  """An aggregate relationship"""
  reservations_aggregate(
    """distinct select on columns"""
    distinct_on: [reservations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reservations_order_by!]

    """filter the rows returned"""
    where: reservations_bool_exp
  ): reservations_aggregate!

  """fetch data from the table: "reservations" using primary key columns"""
  reservations_by_pk(id: Int!): reservations

  """
  fetch data from the table: "return_histories"
  """
  returnHistories(
    """distinct select on columns"""
    distinct_on: [returnHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [returnHistories_order_by!]

    """filter the rows returned"""
    where: returnHistories_bool_exp
  ): [returnHistories!]!

  """
  fetch aggregated fields from the table: "return_histories"
  """
  returnHistories_aggregate(
    """distinct select on columns"""
    distinct_on: [returnHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [returnHistories_order_by!]

    """filter the rows returned"""
    where: returnHistories_bool_exp
  ): returnHistories_aggregate!

  """
  fetch data from the table: "return_histories" using primary key columns
  """
  returnHistories_by_pk(id: Int!): returnHistories

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  createdAt: timestamptz!
  email: String!
  id: Int!
  imageUrl: String

  """An array relationship"""
  impressions(
    """distinct select on columns"""
    distinct_on: [impressions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impressions_order_by!]

    """filter the rows returned"""
    where: impressions_bool_exp
  ): [impressions!]!

  """An aggregate relationship"""
  impressions_aggregate(
    """distinct select on columns"""
    distinct_on: [impressions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impressions_order_by!]

    """filter the rows returned"""
    where: impressions_bool_exp
  ): impressions_aggregate!

  """An array relationship"""
  lending_histories(
    """distinct select on columns"""
    distinct_on: [lendingHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lendingHistories_order_by!]

    """filter the rows returned"""
    where: lendingHistories_bool_exp
  ): [lendingHistories!]!

  """An aggregate relationship"""
  lending_histories_aggregate(
    """distinct select on columns"""
    distinct_on: [lendingHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lendingHistories_order_by!]

    """filter the rows returned"""
    where: lendingHistories_bool_exp
  ): lendingHistories_aggregate!
  name: String!

  """An array relationship"""
  registration_histories(
    """distinct select on columns"""
    distinct_on: [registrationHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registrationHistories_order_by!]

    """filter the rows returned"""
    where: registrationHistories_bool_exp
  ): [registrationHistories!]!

  """An aggregate relationship"""
  registration_histories_aggregate(
    """distinct select on columns"""
    distinct_on: [registrationHistories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [registrationHistories_order_by!]

    """filter the rows returned"""
    where: registrationHistories_bool_exp
  ): registrationHistories_aggregate!

  """An array relationship"""
  reservations(
    """distinct select on columns"""
    distinct_on: [reservations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reservations_order_by!]

    """filter the rows returned"""
    where: reservations_bool_exp
  ): [reservations!]!

  """An aggregate relationship"""
  reservations_aggregate(
    """distinct select on columns"""
    distinct_on: [reservations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reservations_order_by!]

    """filter the rows returned"""
    where: reservations_bool_exp
  ): reservations_aggregate!
  sub: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""aggregate avg on columns"""
type users_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  createdAt: timestamptz_comparison_exp
  email: String_comparison_exp
  id: Int_comparison_exp
  imageUrl: String_comparison_exp
  impressions: impressions_bool_exp
  lending_histories: lendingHistories_bool_exp
  name: String_comparison_exp
  registration_histories: registrationHistories_bool_exp
  reservations: reservations_bool_exp
  sub: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_email_key

  """unique or primary key constraint"""
  users_pkey

  """unique or primary key constraint"""
  users_sub_key
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  createdAt: timestamptz
  email: String
  id: Int
  imageUrl: String
  impressions: impressions_arr_rel_insert_input
  lending_histories: lendingHistories_arr_rel_insert_input
  name: String
  registration_histories: registrationHistories_arr_rel_insert_input
  reservations: reservations_arr_rel_insert_input
  sub: String
}

"""aggregate max on columns"""
type users_max_fields {
  createdAt: timestamptz
  email: String
  id: Int
  imageUrl: String
  name: String
  sub: String
}

"""aggregate min on columns"""
type users_min_fields {
  createdAt: timestamptz
  email: String
  id: Int
  imageUrl: String
  name: String
  sub: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  createdAt: order_by
  email: order_by
  id: order_by
  imageUrl: order_by
  impressions_aggregate: impressions_aggregate_order_by
  lending_histories_aggregate: lendingHistories_aggregate_order_by
  name: order_by
  registration_histories_aggregate: registrationHistories_aggregate_order_by
  reservations_aggregate: reservations_aggregate_order_by
  sub: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  id

  """column name"""
  imageUrl

  """column name"""
  name

  """column name"""
  sub
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  createdAt: timestamptz
  email: String
  id: Int
  imageUrl: String
  name: String
  sub: String
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type users_sum_fields {
  id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  id

  """column name"""
  imageUrl

  """column name"""
  name

  """column name"""
  sub
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  id: Float
}