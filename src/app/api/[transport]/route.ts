import { createMcpHandler } from 'mcp-handler'
import { z } from 'zod'

const handler = createMcpHandler(
  (server) => {
    // „Çµ„Ç§„Ç≥„É≠„ÉÑ„Éº„É´
    server.tool(
      'dice_roll',
      '„Çµ„Ç§„Ç≥„É≠„ÇíÊåØ„Å£„ÅüÁµêÊûú„ÇíËøî„Åó„Åæ„Åô',
      {
        sides: z.number().min(1).max(100).default(6).describe('„Çµ„Ç§„Ç≥„É≠„ÅÆÈù¢„ÅÆÊï∞'),
      },
      async ({ sides }) => {
        const result = Math.floor(Math.random() * sides) + 1
        return {
          content: [{ type: 'text', text: `üé≤ You rolled a ${result}!` }],
        }
      },
    )

    // „Ç≥„Ç§„É≥„Éà„Çπ„ÉÑ„Éº„É´
    server.tool(
      'coin_flip',
      '„Ç≥„Ç§„É≥„ÇíÊäï„Åí„Å¶Ë°®„ÅãË£è„Åã„ÇíËøî„Åó„Åæ„Åô',
      {},
      async () => {
        const result = Math.random() < 0.5 ? 'Ë°®' : 'Ë£è'
        return {
          content: [{ type: 'text', text: `ü™ô „Ç≥„Ç§„É≥„ÅÆÁµêÊûú: ${result}` }],
        }
      },
    )

    // „É©„É≥„ÉÄ„É†Êï∞ÂÄ§ÁîüÊàê„ÉÑ„Éº„É´
    server.tool(
      'random_number',
      'ÊåáÂÆö„Åó„ÅüÁØÑÂõ≤„ÅÆ„É©„É≥„ÉÄ„É†„Å™Êï∞ÂÄ§„ÇíÁîüÊàê„Åó„Åæ„Åô',
      {
        min: z.number().default(1).describe('ÊúÄÂ∞èÂÄ§'),
        max: z.number().default(100).describe('ÊúÄÂ§ßÂÄ§'),
      },
      async ({ min, max }) => {
        const result = Math.floor(Math.random() * (max - min + 1)) + min
        return {
          content: [{ type: 'text', text: `üî¢ „É©„É≥„ÉÄ„É†Êï∞ÂÄ§ (${min}-${max}): ${result}` }],
        }
      },
    )

    // ÁèæÂú®ÊôÇÂàª„ÉÑ„Éº„É´
    server.tool(
      'current_time',
      'ÁèæÂú®„ÅÆÊó•ÊôÇ„ÇíËøî„Åó„Åæ„Åô',
      {
        timezone: z.string().default('Asia/Tokyo').describe('„Çø„Ç§„É†„Çæ„Éº„É≥'),
      },
      async ({ timezone }) => {
        const now = new Date().toLocaleString('ja-JP', { timeZone: timezone })
        return {
          content: [{ type: 'text', text: `‚è∞ ÁèæÂú®ÊôÇÂàª (${timezone}): ${now}` }],
        }
      },
    )
  },
  {
    // Optional server options
  },
  {
    // Optional redis config
    redisUrl: process.env.REDIS_URL,
    basePath: '/api', // this needs to match where the [transport] is located.
    maxDuration: 60,
    verboseLogs: true,
  },
)

export { handler as GET, handler as POST }
